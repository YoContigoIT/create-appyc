{"version":3,"sources":["../index.ts","../actions/create.ts","../utils/messages.ts","../utils/emojis.ts","../utils/template-choices.ts","../helpers/index.ts","../helpers/install.ts","../helpers/checkGitDirectory.ts","../helpers/showConsoleInfo.ts","../helpers/isNestProject.ts","../actions/config.ts","../helpers/copy.ts","../helpers/searchLockFile.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\n\nimport { program } from 'commander'\nimport { config, create } from './actions'\nimport pkg from './package.json'\n\nprogram\n  .name(\"create-appyc\")\n  .version(pkg.version, '-v, --version', 'Output the current version')\n  .description('Create a new project with Appyc')\n\nprogram\n  .command('create')\n  .description('Create a new project')\n  .action(create)\n\nprogram\n  .command('config')\n  .description('Initialize the configuration')\n  .action(config)\n\nif (process.argv.length <= 2)\n  console.log(program.help());\nelse\n  program.parse();","import inquirer from 'inquirer'\nimport fs from 'fs/promises';\nimport path from 'path'\nimport { fileURLToPath } from \"url\";\nimport { MESSAGES } from '../utils/messages';\nimport { connectorsDatabaseChoices, databaseChoises, templateChoices } from '../utils/template-choices';\nimport chalk from 'chalk';\nimport { installAndConfigDependencies } from '../helpers';\nimport { showConsoleInfo } from '../helpers/showConsoleInfo';\nimport { isNestProject } from '../helpers/isNestProject';\n\nexport const create = async () => {\n  const initialOptions = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'template',\n      message: 'Select a template:',\n      choices: Object.keys(templateChoices)\n    },\n    {\n      type: 'list',\n      name: 'database',\n      message: 'Select the database to use:',\n      choices: Object.keys(databaseChoises)\n    }\n  ])\n\n  let useDatabase = { connector: '' }\n\n  if (initialOptions.database !== 'mongodb') {\n    useDatabase = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'connector',\n        message: 'Select the connector to use:',\n        choices: Object.keys(connectorsDatabaseChoices)\n      }\n    ])\n  }\n\n  const configProyect = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Project name:',\n      default: 'my-app',\n      validate: (input: string) => {\n        if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\n        else return 'Project name may only include letters, numbers, underscores and hashes.';\n      }\n    },\n    {\n      type: 'list',\n      name: 'packageManager',\n      message: 'Select a package manager:',\n      choices: ['npm', 'yarn', 'pnpm']\n    }\n  ])\n\n  // Get the selected project\n  const project = templateChoices[initialOptions.template]\n  // Get the project directory\n  const projectDirectory = configProyect.name\n  // Get the destination path\n  const destination = path.join(process.cwd(), projectDirectory);\n  // Get the template folder\n  const template = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    \"templates\",\n    project.value,\n  )\n\n  // Check if the directory already exists\n  fs.mkdir(destination).catch((err) => {  \n    console.error(chalk.red(MESSAGES.DIRECTORY_ALREADY_EXISTS(projectDirectory)));\n    process.exit(1);\n  })\n\n  // Copy the template to the destination\n  if (initialOptions.database !== 'mongodb') {\n    await fs.cp(path.join(template, `${initialOptions.database}/${useDatabase.connector}`), destination, { recursive: true });\n  } else {\n    await fs.cp(path.join(template, 'mongoose'), destination, { recursive: true });\n  }\n\n  await installAndConfigDependencies(destination, configProyect.packageManager).then(async () => {\n    showConsoleInfo(configProyect.packageManager, configProyect.name, await isNestProject(project.value))\n  })\n}\n","import chalk from 'chalk';\nimport { EMOJIS } from './emojis';\n\nexport const MESSAGES = {\n  PACKAGE_MANAGER_INSTALLATION_SUCCEED: (name: string) =>\n    name !== '.'\n      ? `${EMOJIS.ROCKET}  Successfully created project ${chalk.green(name)}`\n      : `${EMOJIS.ROCKET}  Successfully created a new project`,\n  DEPENDENCIES_INSTALLATION_SUCCEED: (name: string) =>\n    `${EMOJIS.ROCKET}  Dependencies installed successfully with ${chalk.green(name)}`,\n  DEPENDENCIES_INSTALLATION_FAILED: `${EMOJIS.SCREAM}  Dependencies installation failed!`,\n  PACKAGE_MANAGER_INSTALLATION_FAILED: (commandToRunManually: string) =>\n    `${EMOJIS.SCREAM}  Packages installation failed!\\nIn case you don't see any errors above, consider manually running the failed command ${commandToRunManually} to see more details on why it errored out.`,\n  PACKAGE_MANAGER_INSTALLATION_IN_PROGRESS: `Package installation in progress... ${EMOJIS.COFFEE}`,\n  DIRECTORY_ALREADY_EXISTS: (directory: string) =>\n    `${EMOJIS.SCREAM}  The directory ${chalk.red(directory)} already exists. Aborting...`,\n  CONFIG_INIT_SUCCEED: (project: string) =>\n    `${EMOJIS.ROCKET}  Successfully initialized the configuration for projects of ${chalk.green(project)}`,\n  CONFIG_INIT_FAILED: `${EMOJIS.SCREAM}  Configuration initialization failed!`,\n};","import { get } from 'node-emoji';\n\nexport const EMOJIS = {\n  HEART: get('heart'),\n  COFFEE: get('coffee'),\n  BEER: get('beer'),\n  BROKEN_HEART: get('broken_heart'),\n  CRYING: get('crying_cat_face'),\n  HEART_EYES: get('heart_eyes_cat'),\n  JOY: get('joy_cat'),\n  KISSING: get('kissing_cat'),\n  SCREAM: get('scream_cat'),\n  ROCKET: get('rocket'),\n  SMIRK: get('smirk_cat'),\n  RAISED_HANDS: get('raised_hands'),\n  POINT_RIGHT: get('point_right'),\n  ZAP: get('zap'),\n  BOOM: get('boom'),\n  PRAY: get('pray'),\n  WINE: get('wine_glass'),\n};\n","export const templateChoices = {\n  'nestjs-jwt-strategy': {\n    value: 'nestjs-jwt-strategy',\n    description: 'NestJS with JWT Strategy'\n  }\n  // 'nodejs-express-basic': {\n  //   value: 'nodejs-express-basic',\n  //   description: 'Node.js with TypeScript'\n  // }\n}\n\nexport const connectorsDatabaseChoices = {\n  'sequelize': {\n    value: 'sequelize',\n    description: 'Sequelize'\n  },\n  'typeorm': {\n    value: 'typeorm',\n    description: 'TypeORM'\n  }\n}\n\nexport const databaseChoises = {\n  'mongodb': {\n    value: 'mongodb',\n    description: 'MongoDB Database'\n  },\n  'mysql': {\n    value: 'mysql',\n    description: 'MySQL Database'\n  },\n  'postgres': {\n    value: 'postgres',\n    description: 'Postgres Database'\n  }\n}\n\nexport const configChoices = {\n  'nestjs': {\n    value: 'nestjs',\n    description: 'Config for NestJS'\n  },\n  'express': {\n    value: 'express',\n    description: 'Config for Express with TypeScript'\n  }\n}","import { readFile } from 'fs/promises';\nexport * from './install';\n\nexport async function readPackageJson(filePath: string) {\n  const data = await readFile(filePath, 'utf-8');\n  return JSON.parse(data);\n}","import chalk from \"chalk\";\nimport { spawn } from \"child_process\";\nimport { MESSAGES } from \"../utils/messages\";\nimport { checkGitDirectory } from \"./checkGitDirectory\";\n\nconst runCommand = async (command: string, args: string[], cwd: string) => {\n  return new Promise<void>((resolve, reject) => {\n    const child = spawn(command, args, {\n      stdio: \"inherit\",\n      cwd,\n      shell: process.platform === \"win32\",\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject(new Error(\"Command failed to execute.\"));\n      }\n    });\n\n    child.on(\"error\", reject);\n  });\n};\n\nconst installDependencies = async (\n  destinationPath: string,\n  packageManager: string,\n  dependencies: string[],\n  isDev = false\n) => {\n  let args = [packageManager === \"yarn\" ? \"add\" : \"install\", ...dependencies];\n  if (isDev) {\n    args.push(packageManager === \"yarn\" ? \"--dev\" : \"-D\");\n  }\n\n  // Corregir argumentos para Windows\n  if (process.platform === \"win32\") {\n    args = [\"/c\", packageManager].concat(args);\n  }\n\n  await runCommand(\n    process.platform === \"win32\" ? \"cmd\" : packageManager,\n    args,\n    destinationPath\n  );\n  console.info(\n    chalk.green(MESSAGES.DEPENDENCIES_INSTALLATION_SUCCEED(packageManager))\n  );\n};\n\nconst initializeHusky = async (destinationPath) => {\n  await runCommand(\"npx\", [\"husky\", \"init\"], destinationPath);\n  console.info(chalk.green(\"Husky initialization successful.\"));\n};\n\nexport const installAndConfigDependencies = async (\n  destinationPath: string,\n  packageManager: string\n) => {\n  const devDependencies = [\n    \"husky\",\n    \"conventional-changelog\",\n    \"cz-conventional-changelog\",\n    \"@commitlint/cli\",\n    \"@commitlint/config-conventional\",\n    \"@commitlint/prompt-cli\",\n  ];\n\n  const productionDependencies = [\"@swc/cli\", \"@swc/core\", \"@swc/jest\"];\n\n  try {\n    console.info(chalk.blue(\"Installing development dependencies...\"));\n    await installDependencies(\n      destinationPath,\n      packageManager,\n      devDependencies,\n      true\n    );\n\n    if (productionDependencies.length > 0) {\n      console.info(chalk.blue(\"Installing production dependencies...\"));\n      await installDependencies(\n        destinationPath,\n        packageManager,\n        productionDependencies\n      );\n    }\n\n    const exists = await checkGitDirectory(destinationPath);\n    if (!exists) {\n      runCommand(\"git\", [\"init\"], destinationPath);\n    }\n\n    console.info(chalk.blue(\"Initializing Husky...\"));\n    await initializeHusky(destinationPath);\n\n    console.info(chalk.green(`Setup complete at ${process.cwd()}.`));\n  } catch (error) {\n    console.error(chalk.red(`Setup failed: ${error.message}`));\n  }\n};\n","import { access } from \"fs/promises\";\nimport path from \"path\";\n\nexport const checkGitDirectory = async (directory) => {\n    try {\n      const gitPath = path.join(directory, '.git');\n      await access(gitPath);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }","import chalk from \"chalk\";\n\nexport const showConsoleInfo = async (packageManager: string, projectName: string, nestProject: boolean = false) => {\n  console.log();\n  console.info(chalk.yellow(\"Dont forget to copy the .env.example file to .env and fill in the necessary environment variables.\"));\n  console.info(chalk.red(\"IMPORTANT: Dont delete the .env.example file, it is used as a reference for the environment variables.\"));\n  console.log();\n  console.info(\"Inside that directory, you can run several commands:\");\n  console.log();\n  console.info(\n    chalk.cyan(\n      `  ${packageManager}${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:dev\" : \"dev\"}`\n    )\n  );\n  console.info(\"    Starts the development server.\");\n  console.log();\n  console.info(\n    chalk.cyan(\n      `  ${packageManager}${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:build\" : \"build\"}`\n    )\n  );\n  console.info(\"    Builds the app for production.\");\n  console.log();\n  console.info(chalk.cyan(`  ${packageManager} start`));\n  console.info(\"    Runs the built app in production mode.\");\n  console.log();\n  console.info(\"We suggest that you begin by typing:\");\n  console.log();\n  console.info(chalk.cyan(\"  cd\"), projectName);\n  console.info(\n    `  ${chalk.cyan(\n      `${packageManager}${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:dev\" : \"dev\"}`\n    )}`\n  );\n};\n","export const isNestProject = async (project: string): Promise<boolean> => {\n  const regex = /^nestjs/i;\n  return regex.test(project);\n};\n","import inquirer from \"inquirer\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { configChoices } from \"../utils/template-choices\";\nimport { installAndConfigDependencies, readPackageJson } from \"../helpers\";\nimport { copyFiles } from \"../helpers/copy\";\nimport { searchLockFile } from \"../helpers/searchLockFile\";\nimport { writeFile } from \"fs/promises\";\nimport os from \"os\";\n\nexport const config = async () => {\n  const projectConfig = await inquirer\n    .prompt([\n      {\n        type: \"list\",\n        name: \"selectedProject\",\n        message: \"Select your project:\",\n        choices: Object.keys(configChoices),\n      }\n    ])\n\n  let typeProject;\n\n  if (projectConfig.selectedProject === \"nestjs\") {\n    typeProject = await inquirer\n      .prompt([\n        {\n          type: \"list\",\n          name: \"type\",\n          message: \"Select your project:\",\n          choices: ['monolith'],\n        },\n      ])\n  }\n\n  // Get the selected project\n  const project = configChoices[projectConfig.selectedProject];\n\n  // Get the selected type\n\n  // root directory\n  const destination = process.cwd();\n\n  // Get the template folder\n  const projectDir = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    \"configs\",\n    project.value\n  );\n  \n  // Get the source package.json\n  const source = path.join(projectDir, \"package.json\");\n\n  // Copy files\n  copyFiles(projectDir, destination, project);\n\n  // Read package.json\n  const packageJSONOrigin = await readPackageJson(source);\n  const packageJSONDestination = await readPackageJson(\n    path.join(destination, \"package.json\")\n  );\n\n  // Remove jest from package.json\n  delete packageJSONDestination.jest;\n  delete packageJSONDestination.scripts[\"start:debug\"]\n  delete packageJSONDestination.scripts[\"start:prod\"]\n\n  // Get the package manager\n  const packageManager = await searchLockFile(destination);\n\n  // Merge package.json\n  const mergedPackageJSON = {\n    ...packageJSONDestination,\n    scripts: {\n      ...packageJSONDestination.scripts,\n      ...packageJSONOrigin.scripts,\n    },\n    dependencies: {\n      ...packageJSONDestination.dependencies,\n      ...packageJSONOrigin.dependencies,\n    },\n    devDependencies: {\n      ...packageJSONDestination.devDependencies,\n      ...packageJSONOrigin.devDependencies,\n    },\n    config: {\n      ...packageJSONDestination.config,\n      ...packageJSONOrigin.config,\n    },\n  };\n\n  // Write package.json\n  await writeFile(\n    path.join(destination, \"package.json\"),\n    JSON.stringify(mergedPackageJSON, null, 2) + os.EOL\n  );\n\n  // Install and configure dependencies\n  await installAndConfigDependencies(destination, packageManager);\n};\n","import chalk from 'chalk';\nimport ncp from 'ncp';\nimport { MESSAGES } from '../utils/messages';\nimport path from 'path';\n\nexport const copyFiles = (projectConfigPath: string, destinationPath: string, projectName: string) => {\n  ncp(projectConfigPath, destinationPath, {\n    filter: (source) => {\n      // Exclude the package.json file\n      const nombreArchivo = path.basename(source);\n      return nombreArchivo !== 'package.json'\n    }\n  }, function (error) {\n    if (error) {\n      console.error(chalk.red(MESSAGES.CONFIG_INIT_FAILED));\n    } else {\n      console.log(chalk.green(MESSAGES.CONFIG_INIT_SUCCEED(projectName)))\n    }\n  })\n};","import { readdir } from \"fs/promises\";\n\nconst packageManagers = {\n  \"package-lock.json\": \"npm\",\n  \"yarn.lock\": \"yarn\",\n  \"pnpm-lock.yaml\": \"pnpm\",\n};\n\nexport async function searchLockFile(destinationPath): Promise<string> {\n  // Read the directory\n  const files = await readdir(destinationPath);\n\n  // Regular expression to match the lock files\n  const regex = /^(yarn\\.lock|package-lock\\.json|pnpm-lock\\.yaml)$/;\n\n  // Filter the files\n  const matchedFiles = files.find((file) => regex.test(file));\n\n  return packageManagers[matchedFiles ?? \"npm\"]; // Return the matched files\n}\n","{\n  \"name\": \"create-appyc\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Create a new projects from a template\",\n  \"main\": \"index.mjs\",\n  \"preferGlobal\": true,\n  \"bin\": {\n    \"create-appyc\": \"dist/index.mjs\"\n  },\n  \"files\": [\n    \"dist/**/*\"\n  ],\n  \"author\": \"Ulises Vargas\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"chalk\": \"5.3.0\",\n    \"commander\": \"12.0.0\",\n    \"glob\": \"^10.3.10\",\n    \"inquirer\": \"8.2.6\",\n    \"ncp\": \"2.0.0\",\n    \"node-emoji\": \"2.1.3\",\n    \"ts-node\": \"10.9.2\",\n    \"update-notifier\": \"^7.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"start\": \"node dist/index.mjs\",\n    \"dev\": \"tsup --watch\"\n  },\n  \"devDependencies\": {\n    \"@types/inquirer\": \"9.0.7\",\n    \"@types/ncp\": \"2.0.8\",\n    \"@types/node\": \"^20.11.20\",\n    \"@types/update-notifier\": \"^6.0.8\",\n    \"tsup\": \"^8.0.2\",\n    \"typescript\": \"^5.3.3\"\n  }\n}\n"],"mappings":"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","names":["path","chalk","chalk","chalk","chalk","path","chalk","inquirer","path","fileURLToPath","chalk","path","chalk","inquirer","path","fileURLToPath"]}