{"version":3,"sources":["../index.ts","../actions/create.ts","../utils/messages.ts","../utils/emojis.ts","../utils/template-choices.ts","../helpers/index.ts","../helpers/install.ts","../helpers/searchLockFile.ts","../actions/config.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { program } from 'commander'\r\nimport { config, create } from './actions'\r\nimport { version } from './package.json'\r\n\r\nprogram\r\n  .name(\"create-appyc\")\r\n  .version(version, '-v, --version', 'Output the current version')\r\n  .description('Create a new project with Appyc')\r\n\r\nprogram\r\n  .command('create')\r\n  .description('Create a new project')\r\n  .action(create)\r\n\r\nprogram\r\n  .command('config')\r\n  .description('Initialize the configuration')\r\n  .action(config)\r\n\r\nif (process.argv.length <= 2)\r\n  console.log(program.help());\r\nelse\r\n  program.parse();","import inquirer from 'inquirer'\r\nimport fs from 'fs/promises';\r\nimport path from 'path'\r\nimport { fileURLToPath } from \"url\";\r\nimport { MESSAGES } from '../utils/messages';\r\nimport { connectorsDatabaseChoices, databaseChoises, templateChoices } from '../utils/template-choices';\r\nimport chalk from 'chalk';\r\nimport { installDependenciesInNewProject } from '../helpers';\r\n\r\nexport const create = async () => {\r\n  const initialOptions = await inquirer.prompt([\r\n    {\r\n      type: 'list',\r\n      name: 'template',\r\n      message: 'Select a template:',\r\n      choices: Object.keys(templateChoices)\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'database',\r\n      message: 'Select the database to use:',\r\n      choices: Object.keys(databaseChoises)\r\n    }\r\n  ])\r\n\r\n  let useDatabase = { connector: '' }\r\n\r\n  if (initialOptions.database !== 'mongodb') {\r\n    useDatabase = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'connector',\r\n        message: 'Select the connector to use:',\r\n        choices: Object.keys(connectorsDatabaseChoices)\r\n      }\r\n    ])\r\n  }\r\n\r\n  const configProyect = await inquirer.prompt([\r\n    {\r\n      type: 'input',\r\n      name: 'name',\r\n      message: 'Project name:',\r\n      default: 'my-app',\r\n      validate: (input: string) => {\r\n        if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\r\n        else return 'Project name may only include letters, numbers, underscores and hashes.';\r\n      }\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'packageManager',\r\n      message: 'Select a package manager:',\r\n      choices: ['npm', 'yarn', 'pnpm']\r\n    }\r\n  ])\r\n\r\n  // Get the selected project\r\n  const project = templateChoices[initialOptions.template]\r\n  // Get the project directory\r\n  const projectDirectory = configProyect.name\r\n  // Get the destination path\r\n  const destination = path.join(process.cwd(), projectDirectory);\r\n  // Get the template folder\r\n  const template = path.join(\r\n    path.dirname(fileURLToPath(import.meta.url)),\r\n    \"templates\",\r\n    project.value,\r\n  )\r\n\r\n  // Check if the directory already exists\r\n  fs.mkdir(destination).catch((err) => {  \r\n    console.error(chalk.red(MESSAGES.DIRECTORY_ALREADY_EXISTS(projectDirectory)));\r\n    process.exit(1);\r\n  })\r\n\r\n  // Copy the template to the destination\r\n  if (initialOptions.database !== 'mongodb') {\r\n    await fs.cp(path.join(template, `${initialOptions.database}/${useDatabase.connector}`), destination, { recursive: true });\r\n  } else {\r\n    await fs.cp(path.join(template, 'mongoose'), destination, { recursive: true });\r\n  }\r\n\r\n  await installDependenciesInNewProject(destination, configProyect.packageManager, projectDirectory);\r\n}\r\n","import chalk from 'chalk';\r\nimport { EMOJIS } from './emojis';\r\n\r\nexport const MESSAGES = {\r\n  PACKAGE_MANAGER_INSTALLATION_SUCCEED: (name: string) =>\r\n    name !== '.'\r\n      ? `${EMOJIS.ROCKET}  Successfully created project ${chalk.green(name)}`\r\n      : `${EMOJIS.ROCKET}  Successfully created a new project`,\r\n  DEPENDENCIES_INSTALLATION_SUCCEED: (name: string) =>\r\n    `${EMOJIS.ROCKET}  Dependencies installed successfully with ${chalk.green(name)}`,\r\n  PACKAGE_MANAGER_INSTALLATION_FAILED: (commandToRunManually: string) =>\r\n    `${EMOJIS.SCREAM}  Packages installation failed!\\nIn case you don't see any errors above, consider manually running the failed command ${commandToRunManually} to see more details on why it errored out.`,\r\n  PACKAGE_MANAGER_INSTALLATION_IN_PROGRESS: `Package installation in progress... ${EMOJIS.COFFEE}`,\r\n  DIRECTORY_ALREADY_EXISTS: (directory: string) =>\r\n    `${EMOJIS.SCREAM}  The directory ${chalk.red(directory)} already exists. Aborting...`,\r\n  CONFIG_INIT_SUCCEED: (project: string) =>\r\n    `${EMOJIS.ROCKET}  Successfully initialized the configuration for projects of ${chalk.green(project)}`,\r\n  CONFIG_INIT_FAILED: `${EMOJIS.SCREAM}  Configuration initialization failed!`,\r\n};","import { get } from 'node-emoji';\r\n\r\nexport const EMOJIS = {\r\n  HEART: get('heart'),\r\n  COFFEE: get('coffee'),\r\n  BEER: get('beer'),\r\n  BROKEN_HEART: get('broken_heart'),\r\n  CRYING: get('crying_cat_face'),\r\n  HEART_EYES: get('heart_eyes_cat'),\r\n  JOY: get('joy_cat'),\r\n  KISSING: get('kissing_cat'),\r\n  SCREAM: get('scream_cat'),\r\n  ROCKET: get('rocket'),\r\n  SMIRK: get('smirk_cat'),\r\n  RAISED_HANDS: get('raised_hands'),\r\n  POINT_RIGHT: get('point_right'),\r\n  ZAP: get('zap'),\r\n  BOOM: get('boom'),\r\n  PRAY: get('pray'),\r\n  WINE: get('wine_glass'),\r\n};\r\n","export const templateChoices = {\r\n  'nestjs-jwt-strategy': {\r\n    value: 'nestjs-jwt-strategy',\r\n    description: 'NestJS with JWT Strategy'\r\n  },\r\n  'nodejs-express-basic': {\r\n    value: 'nodejs-express-basic',\r\n    description: 'Node.js with TypeScript'\r\n  }\r\n}\r\n\r\nexport const connectorsDatabaseChoices = {\r\n  'sequelize': {\r\n    value: 'sequelize',\r\n    description: 'Sequelize'\r\n  },\r\n  'typeorm': {\r\n    value: 'typeorm',\r\n    description: 'TypeORM'\r\n  }\r\n}\r\n\r\nexport const databaseChoises = {\r\n  'mongodb': {\r\n    value: 'mongodb',\r\n    description: 'MongoDB Database'\r\n  },\r\n  'mysql': {\r\n    value: 'mysql',\r\n    description: 'MySQL Database'\r\n  },\r\n  'postgres': {\r\n    value: 'postgres',\r\n    description: 'Postgres Database'\r\n  }\r\n}\r\n\r\nexport const configChoices = {\r\n  'nestjs': {\r\n    value: 'nestjs',\r\n    description: 'Config for NestJS'\r\n  },\r\n  'express': {\r\n    value: 'express',\r\n    description: 'Config for Express with TypeScript'\r\n  }\r\n}","import { readFile } from 'fs/promises';\r\nexport * from './install';\r\n\r\nexport const extractPackageManager = (filePath: string) => {\r\n  const match = filePath.match(/\\/(pnpm|npm|yarn)/);\r\n  return match ? match[1] : null;\r\n}\r\n\r\nexport async function readPackageJson(filePath: string) {\r\n  const data = await readFile(filePath, 'utf-8');\r\n  return JSON.parse(data);\r\n}","import chalk from 'chalk';\r\nimport { glob } from 'glob';\r\nimport { spawn } from 'child_process';\r\nimport os from \"os\";\r\nimport path from 'path'\r\nimport { extractPackageManager, readPackageJson } from '.';\r\nimport { MESSAGES } from '../utils/messages';\r\nimport { writeFile } from 'fs/promises';\r\nimport { searchLockFile } from './searchLockFile';\r\n\r\nexport const installDependenciesInNewProject = async (destinationPath: string, packageManager: string, projectName: string) => {\r\n  const installProcess = spawn(packageManager, ['install'], {\r\n    stdio: 'inherit',\r\n    cwd: destinationPath\r\n  });\r\n\r\n  installProcess.on('exit', (code) => {\r\n    if (code === 0) {\r\n      console.info(chalk.green(MESSAGES.PACKAGE_MANAGER_INSTALLATION_SUCCEED(packageManager)));\r\n      console.log('Inside that directory, you can run several commands:')\r\n      console.log()\r\n      console.log(chalk.cyan(`  ${packageManager} ${packageManager !== 'npm' ? '' : 'run '}dev`))\r\n      console.log('    Starts the development server.')\r\n      console.log()\r\n      console.log(chalk.cyan(`  ${packageManager} ${packageManager !== 'npm' ? '' : 'run '}build`))\r\n      console.log('    Builds the app for production.')\r\n      console.log()\r\n      console.log(chalk.cyan(`  ${packageManager} start`))\r\n      console.log('    Runs the built app in production mode.')\r\n      console.log()\r\n      console.log('We suggest that you begin by typing:')\r\n      console.log()\r\n      console.log(chalk.cyan('  cd'), projectName)\r\n      console.log(`  ${chalk.cyan(`${packageManager} ${packageManager !== 'npm' ? '' : 'run '}dev`)}`)\r\n    } else {\r\n      chalk.red(\r\n        MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\r\n          chalk.bold(packageManager),\r\n        ),\r\n      )\r\n    }\r\n  });\r\n\r\n  // Handle errors during the installation process\r\n  installProcess.on('error', (error) => {\r\n    chalk.red(\r\n      MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\r\n        chalk.bold(packageManager),\r\n      ),\r\n    )\r\n  })\r\n}\r\n\r\nexport const installConfigDependencies = async (sourcePath: string, destinationPath: string) => {\r\n  const packageJSONOrigin = await readPackageJson(sourcePath);\r\n  const packageJSONDestination = await readPackageJson(path.join(destinationPath, \"package.json\"));\r\n  const [lockFile] = await searchLockFile(destinationPath);\r\n  \r\n\r\n  const mergedPackageJSON = {\r\n    ...packageJSONDestination,\r\n    scripts: {\r\n      ...packageJSONDestination.scripts,\r\n      ...packageJSONOrigin.scripts,\r\n    },\r\n    dependencies: {\r\n      ...packageJSONDestination.dependencies,\r\n      ...packageJSONOrigin.dependencies\r\n    },\r\n    devDependencies: {\r\n      ...packageJSONDestination.devDependencies,\r\n      ...packageJSONOrigin.devDependencies\r\n    },\r\n    config: {\r\n      ...packageJSONDestination.config,\r\n      ...packageJSONOrigin.config\r\n    }\r\n  };\r\n\r\n  await writeFile(\r\n    path.join(destinationPath, \"package.json\"),\r\n    JSON.stringify(mergedPackageJSON, null, 2) + os.EOL\r\n  );\r\n\r\n  const packageManager = extractPackageManager(lockFile) ?? 'npm'\r\n  const args = [\r\n    packageManager === 'yarn' ? 'add' : 'install',\r\n    'husky',\r\n    'conventional-changelog',\r\n    'cz-conventional-changelog',\r\n    '@commitlint/cli',\r\n    '@commitlint/config-conventional',\r\n    '@commitlint/prompt-cli'\r\n  ];\r\n\r\n  const installProcess = spawn(packageManager, args, {\r\n    stdio: 'inherit',\r\n    cwd: destinationPath\r\n  });\r\n\r\n  installProcess.on('exit', async (code) => {\r\n    if (code === 0) {\r\n      console.info(chalk.green(MESSAGES.DEPENDENCIES_INSTALLATION_SUCCEED(packageManager)));\r\n      const huskyInitProcess = spawn('npx', ['husky', 'init'], {\r\n        stdio: 'inherit',\r\n        cwd: destinationPath\r\n      });\r\n\r\n      huskyInitProcess.on('exit', (huskyCode) => {\r\n        if (huskyCode === 0) {\r\n          console.info(chalk.green('Husky initialization successful.'));\r\n        } else {\r\n          console.error(chalk.red('Husky initialization failed.'));\r\n        }\r\n      });\r\n    } else {\r\n      chalk.red(\r\n        MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\r\n          chalk.bold(packageManager),\r\n        ),\r\n      )\r\n    }\r\n  });\r\n\r\n  // Handle errors during the installation process\r\n  installProcess.on('error', (error) => {\r\n    chalk.red(\r\n      MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\r\n        chalk.bold(packageManager),\r\n      ),\r\n    )\r\n  })\r\n}","import { readdir } from \"fs/promises\";\r\n\r\nexport async function searchLockFile(destinationPath) {\r\n  try {\r\n    // Read the directory\r\n    const files = await readdir(destinationPath);\r\n\r\n    // Regular expression to match the lock files\r\n    const regex = /^(yarn\\.lock|package-lock\\.json|pnpm-lock\\.yaml)$/;\r\n\r\n    // Filter the files\r\n    const matchedFiles = files.filter((file) => regex.test(file));\r\n\r\n    return matchedFiles; // Return the matched files\r\n  } catch (err) {\r\n    console.error(\"Error al leer el directorio:\", err);\r\n    return []; // Return an empty array\r\n  }\r\n}\r\n","import inquirer from 'inquirer'\r\nimport path from 'path'\r\nimport { fileURLToPath } from \"url\";\r\nimport { configChoices } from '../utils/template-choices'\r\nimport { installConfigDependencies } from '../helpers';\r\nimport { copyFiles } from '../helpers/copy';\r\n\r\nexport const config = () => {\r\n  inquirer.prompt([\r\n    {\r\n      type: 'list',\r\n      name: 'projectConfig',\r\n      message: 'Select your project:',\r\n      choices: Object.keys(configChoices)\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'type',\r\n      message: 'Select your project:',\r\n      choices: ['monolithic']\r\n    },\r\n  ])\r\n    .then(async answers => {\r\n      // Get the selected project\r\n      const project = answers.projectConfig\r\n\r\n      // Get the selected type\r\n      const typeProject = answers.type\r\n\r\n      // root directory\r\n      const destination = process.cwd()\r\n\r\n      // Get the template folder\r\n      const projectConfig = path.join(\r\n        path.dirname(fileURLToPath(import.meta.url)),\r\n        \"configs\",\r\n        `${project}/${typeProject}`\r\n      )\r\n      \r\n      // copyFiles(projectConfig, destination, project)\r\n\r\n      await installConfigDependencies(path.join(projectConfig, \"package.json\"), destination)\r\n    })\r\n}\r\n","{\r\n  \"name\": \"create-appyc\",\r\n  \"version\": \"1.1.0\",\r\n  \"description\": \"Create a new projects from a template\",\r\n  \"main\": \"index.mjs\",\r\n  \"preferGlobal\": true,\r\n  \"bin\": {\r\n    \"create-appyc\": \"dist/index.mjs\"\r\n  },\r\n  \"files\": [\r\n    \"dist/**/*\"\r\n  ],\r\n  \"author\": \"Ulises Vargas\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"chalk\": \"5.3.0\",\r\n    \"commander\": \"12.0.0\",\r\n    \"glob\": \"^10.3.10\",\r\n    \"inquirer\": \"8.2.6\",\r\n    \"ncp\": \"2.0.0\",\r\n    \"node-emoji\": \"2.1.3\",\r\n    \"ts-node\": \"10.9.2\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup\",\r\n    \"start\": \"node dist/index.mjs\",\r\n    \"dev\": \"tsup --watch\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/inquirer\": \"9.0.7\",\r\n    \"@types/ncp\": \"2.0.8\",\r\n    \"@types/node\": \"^20.11.20\",\r\n    \"tsup\": \"^8.0.2\",\r\n    \"typescript\": \"^5.3.3\"\r\n  }\r\n}\r\n"],"mappings":";;;AAEA,SAAS,eAAe;;;ACFxB,OAAO,cAAc;AACrB,OAAO,QAAQ;AACf,OAAOA,WAAU;AACjB,SAAS,qBAAqB;;;ACH9B,OAAO,WAAW;;;ACAlB,SAAS,WAAW;AAEb,IAAM,SAAS;AAAA,EACpB,OAAO,IAAI,OAAO;AAAA,EAClB,QAAQ,IAAI,QAAQ;AAAA,EACpB,MAAM,IAAI,MAAM;AAAA,EAChB,cAAc,IAAI,cAAc;AAAA,EAChC,QAAQ,IAAI,iBAAiB;AAAA,EAC7B,YAAY,IAAI,gBAAgB;AAAA,EAChC,KAAK,IAAI,SAAS;AAAA,EAClB,SAAS,IAAI,aAAa;AAAA,EAC1B,QAAQ,IAAI,YAAY;AAAA,EACxB,QAAQ,IAAI,QAAQ;AAAA,EACpB,OAAO,IAAI,WAAW;AAAA,EACtB,cAAc,IAAI,cAAc;AAAA,EAChC,aAAa,IAAI,aAAa;AAAA,EAC9B,KAAK,IAAI,KAAK;AAAA,EACd,MAAM,IAAI,MAAM;AAAA,EAChB,MAAM,IAAI,MAAM;AAAA,EAChB,MAAM,IAAI,YAAY;AACxB;;;ADjBO,IAAM,WAAW;AAAA,EACtB,sCAAsC,CAAC,SACrC,SAAS,MACL,GAAG,OAAO,MAAM,kCAAkC,MAAM,MAAM,IAAI,CAAC,KACnE,GAAG,OAAO,MAAM;AAAA,EACtB,mCAAmC,CAAC,SAClC,GAAG,OAAO,MAAM,8CAA8C,MAAM,MAAM,IAAI,CAAC;AAAA,EACjF,qCAAqC,CAAC,yBACpC,GAAG,OAAO,MAAM;AAAA,uFAAyH,oBAAoB;AAAA,EAC/J,0CAA0C,uCAAuC,OAAO,MAAM;AAAA,EAC9F,0BAA0B,CAAC,cACzB,GAAG,OAAO,MAAM,mBAAmB,MAAM,IAAI,SAAS,CAAC;AAAA,EACzD,qBAAqB,CAAC,YACpB,GAAG,OAAO,MAAM,gEAAgE,MAAM,MAAM,OAAO,CAAC;AAAA,EACtG,oBAAoB,GAAG,OAAO,MAAM;AACtC;;;AElBO,IAAM,kBAAkB;AAAA,EAC7B,uBAAuB;AAAA,IACrB,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA,wBAAwB;AAAA,IACtB,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AACF;AAEO,IAAM,4BAA4B;AAAA,EACvC,aAAa;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA,WAAW;AAAA,IACT,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AACF;AAEO,IAAM,kBAAkB;AAAA,EAC7B,WAAW;AAAA,IACT,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA,SAAS;AAAA,IACP,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA,YAAY;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AACF;AAEO,IAAM,gBAAgB;AAAA,EAC3B,UAAU;AAAA,IACR,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AAAA,EACA,WAAW;AAAA,IACT,OAAO;AAAA,IACP,aAAa;AAAA,EACf;AACF;;;AHxCA,OAAOC,YAAW;;;AINlB,SAAS,gBAAgB;;;ACAzB,OAAOC,YAAW;AAElB,SAAS,aAAa;AACtB,OAAO,QAAQ;AACf,OAAO,UAAU;AAGjB,SAAS,iBAAiB;;;ACP1B,SAAS,eAAe;AAExB,eAAsB,eAAe,iBAAiB;AACpD,MAAI;AAEF,UAAM,QAAQ,MAAM,QAAQ,eAAe;AAG3C,UAAM,QAAQ;AAGd,UAAM,eAAe,MAAM,OAAO,CAAC,SAAS,MAAM,KAAK,IAAI,CAAC;AAE5D,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,gCAAgC,GAAG;AACjD,WAAO,CAAC;AAAA,EACV;AACF;;;ADRO,IAAM,kCAAkC,OAAO,iBAAyB,gBAAwB,gBAAwB;AAC7H,QAAM,iBAAiB,MAAM,gBAAgB,CAAC,SAAS,GAAG;AAAA,IACxD,OAAO;AAAA,IACP,KAAK;AAAA,EACP,CAAC;AAED,iBAAe,GAAG,QAAQ,CAAC,SAAS;AAClC,QAAI,SAAS,GAAG;AACd,cAAQ,KAAKC,OAAM,MAAM,SAAS,qCAAqC,cAAc,CAAC,CAAC;AACvF,cAAQ,IAAI,sDAAsD;AAClE,cAAQ,IAAI;AACZ,cAAQ,IAAIA,OAAM,KAAK,KAAK,cAAc,IAAI,mBAAmB,QAAQ,KAAK,MAAM,KAAK,CAAC;AAC1F,cAAQ,IAAI,oCAAoC;AAChD,cAAQ,IAAI;AACZ,cAAQ,IAAIA,OAAM,KAAK,KAAK,cAAc,IAAI,mBAAmB,QAAQ,KAAK,MAAM,OAAO,CAAC;AAC5F,cAAQ,IAAI,oCAAoC;AAChD,cAAQ,IAAI;AACZ,cAAQ,IAAIA,OAAM,KAAK,KAAK,cAAc,QAAQ,CAAC;AACnD,cAAQ,IAAI,4CAA4C;AACxD,cAAQ,IAAI;AACZ,cAAQ,IAAI,sCAAsC;AAClD,cAAQ,IAAI;AACZ,cAAQ,IAAIA,OAAM,KAAK,MAAM,GAAG,WAAW;AAC3C,cAAQ,IAAI,KAAKA,OAAM,KAAK,GAAG,cAAc,IAAI,mBAAmB,QAAQ,KAAK,MAAM,KAAK,CAAC,EAAE;AAAA,IACjG,OAAO;AACL,MAAAA,OAAM;AAAA,QACJ,SAAS;AAAA,UACPA,OAAM,KAAK,cAAc;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAGD,iBAAe,GAAG,SAAS,CAAC,UAAU;AACpC,IAAAA,OAAM;AAAA,MACJ,SAAS;AAAA,QACPA,OAAM,KAAK,cAAc;AAAA,MAC3B;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEO,IAAM,4BAA4B,OAAO,YAAoB,oBAA4B;AAC9F,QAAM,oBAAoB,MAAM,gBAAgB,UAAU;AAC1D,QAAM,yBAAyB,MAAM,gBAAgB,KAAK,KAAK,iBAAiB,cAAc,CAAC;AAC/F,QAAM,CAAC,QAAQ,IAAI,MAAM,eAAe,eAAe;AAGvD,QAAM,oBAAoB;AAAA,IACxB,GAAG;AAAA,IACH,SAAS;AAAA,MACP,GAAG,uBAAuB;AAAA,MAC1B,GAAG,kBAAkB;AAAA,IACvB;AAAA,IACA,cAAc;AAAA,MACZ,GAAG,uBAAuB;AAAA,MAC1B,GAAG,kBAAkB;AAAA,IACvB;AAAA,IACA,iBAAiB;AAAA,MACf,GAAG,uBAAuB;AAAA,MAC1B,GAAG,kBAAkB;AAAA,IACvB;AAAA,IACA,QAAQ;AAAA,MACN,GAAG,uBAAuB;AAAA,MAC1B,GAAG,kBAAkB;AAAA,IACvB;AAAA,EACF;AAEA,QAAM;AAAA,IACJ,KAAK,KAAK,iBAAiB,cAAc;AAAA,IACzC,KAAK,UAAU,mBAAmB,MAAM,CAAC,IAAI,GAAG;AAAA,EAClD;AAEA,QAAM,iBAAiB,sBAAsB,QAAQ,KAAK;AAC1D,QAAM,OAAO;AAAA,IACX,mBAAmB,SAAS,QAAQ;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,iBAAiB,MAAM,gBAAgB,MAAM;AAAA,IACjD,OAAO;AAAA,IACP,KAAK;AAAA,EACP,CAAC;AAED,iBAAe,GAAG,QAAQ,OAAO,SAAS;AACxC,QAAI,SAAS,GAAG;AACd,cAAQ,KAAKA,OAAM,MAAM,SAAS,kCAAkC,cAAc,CAAC,CAAC;AACpF,YAAM,mBAAmB,MAAM,OAAO,CAAC,SAAS,MAAM,GAAG;AAAA,QACvD,OAAO;AAAA,QACP,KAAK;AAAA,MACP,CAAC;AAED,uBAAiB,GAAG,QAAQ,CAAC,cAAc;AACzC,YAAI,cAAc,GAAG;AACnB,kBAAQ,KAAKA,OAAM,MAAM,kCAAkC,CAAC;AAAA,QAC9D,OAAO;AACL,kBAAQ,MAAMA,OAAM,IAAI,8BAA8B,CAAC;AAAA,QACzD;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,MAAAA,OAAM;AAAA,QACJ,SAAS;AAAA,UACPA,OAAM,KAAK,cAAc;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAGD,iBAAe,GAAG,SAAS,CAAC,UAAU;AACpC,IAAAA,OAAM;AAAA,MACJ,SAAS;AAAA,QACPA,OAAM,KAAK,cAAc;AAAA,MAC3B;AAAA,IACF;AAAA,EACF,CAAC;AACH;;;ADjIO,IAAM,wBAAwB,CAAC,aAAqB;AACzD,QAAM,QAAQ,SAAS,MAAM,mBAAmB;AAChD,SAAO,QAAQ,MAAM,CAAC,IAAI;AAC5B;AAEA,eAAsB,gBAAgB,UAAkB;AACtD,QAAM,OAAO,MAAM,SAAS,UAAU,OAAO;AAC7C,SAAO,KAAK,MAAM,IAAI;AACxB;;;AJFO,IAAM,SAAS,YAAY;AAChC,QAAM,iBAAiB,MAAM,SAAS,OAAO;AAAA,IAC3C;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,OAAO,KAAK,eAAe;AAAA,IACtC;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,OAAO,KAAK,eAAe;AAAA,IACtC;AAAA,EACF,CAAC;AAED,MAAI,cAAc,EAAE,WAAW,GAAG;AAElC,MAAI,eAAe,aAAa,WAAW;AACzC,kBAAc,MAAM,SAAS,OAAO;AAAA,MAClC;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS,OAAO,KAAK,yBAAyB;AAAA,MAChD;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,gBAAgB,MAAM,SAAS,OAAO;AAAA,IAC1C;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,UAAU,CAAC,UAAkB;AAC3B,YAAI,sBAAsB,KAAK,KAAK;AAAG,iBAAO;AAAA;AACzC,iBAAO;AAAA,MACd;AAAA,IACF;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,CAAC,OAAO,QAAQ,MAAM;AAAA,IACjC;AAAA,EACF,CAAC;AAGD,QAAM,UAAU,gBAAgB,eAAe,QAAQ;AAEvD,QAAM,mBAAmB,cAAc;AAEvC,QAAM,cAAcC,MAAK,KAAK,QAAQ,IAAI,GAAG,gBAAgB;AAE7D,QAAM,WAAWA,MAAK;AAAA,IACpBA,MAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAAA,IAC3C;AAAA,IACA,QAAQ;AAAA,EACV;AAGA,KAAG,MAAM,WAAW,EAAE,MAAM,CAAC,QAAQ;AACnC,YAAQ,MAAMC,OAAM,IAAI,SAAS,yBAAyB,gBAAgB,CAAC,CAAC;AAC5E,YAAQ,KAAK,CAAC;AAAA,EAChB,CAAC;AAGD,MAAI,eAAe,aAAa,WAAW;AACzC,UAAM,GAAG,GAAGD,MAAK,KAAK,UAAU,GAAG,eAAe,QAAQ,IAAI,YAAY,SAAS,EAAE,GAAG,aAAa,EAAE,WAAW,KAAK,CAAC;AAAA,EAC1H,OAAO;AACL,UAAM,GAAG,GAAGA,MAAK,KAAK,UAAU,UAAU,GAAG,aAAa,EAAE,WAAW,KAAK,CAAC;AAAA,EAC/E;AAEA,QAAM,gCAAgC,aAAa,cAAc,gBAAgB,gBAAgB;AACnG;;;AOpFA,OAAOE,eAAc;AACrB,OAAOC,WAAU;AACjB,SAAS,iBAAAC,sBAAqB;AAKvB,IAAM,SAAS,MAAM;AAC1B,EAAAC,UAAS,OAAO;AAAA,IACd;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,OAAO,KAAK,aAAa;AAAA,IACpC;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,CAAC,YAAY;AAAA,IACxB;AAAA,EACF,CAAC,EACE,KAAK,OAAM,YAAW;AAErB,UAAM,UAAU,QAAQ;AAGxB,UAAM,cAAc,QAAQ;AAG5B,UAAM,cAAc,QAAQ,IAAI;AAGhC,UAAM,gBAAgBC,MAAK;AAAA,MACzBA,MAAK,QAAQC,eAAc,YAAY,GAAG,CAAC;AAAA,MAC3C;AAAA,MACA,GAAG,OAAO,IAAI,WAAW;AAAA,IAC3B;AAIA,UAAM,0BAA0BD,MAAK,KAAK,eAAe,cAAc,GAAG,WAAW;AAAA,EACvF,CAAC;AACL;;;ACzCE,cAAW;;;ATIb,QACG,KAAK,cAAc,EACnB,QAAQ,SAAS,iBAAiB,4BAA4B,EAC9D,YAAY,iCAAiC;AAEhD,QACG,QAAQ,QAAQ,EAChB,YAAY,sBAAsB,EAClC,OAAO,MAAM;AAEhB,QACG,QAAQ,QAAQ,EAChB,YAAY,8BAA8B,EAC1C,OAAO,MAAM;AAEhB,IAAI,QAAQ,KAAK,UAAU;AACzB,UAAQ,IAAI,QAAQ,KAAK,CAAC;AAAA;AAE1B,UAAQ,MAAM;","names":["path","chalk","chalk","chalk","path","chalk","inquirer","path","fileURLToPath","inquirer","path","fileURLToPath"]}