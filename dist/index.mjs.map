{"version":3,"sources":["../index.ts","../actions/create.ts","../utils/messages.ts","../utils/emojis.ts","../utils/template-choices.ts","../helpers/index.ts","../helpers/install.ts","../actions/config.ts","../helpers/copy.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\n\nimport { program } from 'commander'\nimport { config, create } from './actions'\nimport { version } from './package.json'\n\nprogram\n  .name(\"create-appyc\")\n  .version(version, '-v, --version', 'Output the current version')\n  .description('Create a new project with Appyc')\n\nprogram\n  .command('create')\n  .description('Create a new project')\n  .action(create)\n\nprogram\n  .command('config')\n  .description('Initialize the configuration')\n  .action(config)\n\nif (process.argv.length <= 2)\n  console.log(program.help());\nelse\n  program.parse();","import inquirer from 'inquirer'\nimport fs, { promises } from 'fs';\nimport path from 'path'\nimport { fileURLToPath } from \"url\";\nimport { MESSAGES } from '../utils/messages';\nimport { templateChoices } from '../utils/template-choices';\nimport chalk from 'chalk';\nimport { installDependenciesInNewProject } from '../helpers';\n\nexport const create = () => {\n  inquirer.prompt([\n    {\n      type: 'list',\n      name: 'template',\n      message: 'Select a template:',\n      choices: Object.keys(templateChoices)\n    },\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Project name:',\n      default: 'my-app',\n      validate: (input: string) => {\n        if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\n        else return 'Project name may only include letters, numbers, underscores and hashes.';\n      }\n    },\n    {\n      type: 'list',\n      name: 'packageManager',\n      message: 'Select a package manager:',\n      choices: ['npm', 'yarn', 'pnpm']\n    },\n  ])\n    .then(async answers => {\n      // Get the selected project\n      const project = templateChoices[answers.template]\n      // Get the project directory\n      const projectDirectory = answers.name\n      // Get the destination path\n      const destination = path.join(process.cwd(), projectDirectory);\n      // Get the template folder\n      const template = path.join(\n        path.dirname(fileURLToPath(import.meta.url)),\n        \"templates\",\n        project.value,\n      )\n      // Check if the directory already exists\n      if (fs.existsSync(destination)) {\n        console.error(chalk.red(MESSAGES.DIRECTORY_ALREADY_EXISTS(projectDirectory)));\n        process.exit(1);\n      }\n      // Copy the template to the destination\n      await promises.cp(path.join(template, \"project\"), destination, { recursive: true });\n      // List packageManagerOptions\n      const packageManagerOptions = {\n        npm: 'npm install',\n        yarn: 'yarn',\n        pnpm: 'pnpm install'\n      }\n      await installDependenciesInNewProject(destination, answers.packageManager, projectDirectory);\n    })\n}\n","import chalk from 'chalk';\nimport { EMOJIS } from './emojis';\n\nexport const MESSAGES = {\n  PACKAGE_MANAGER_INSTALLATION_SUCCEED: (name: string) =>\n    name !== '.'\n      ? `${EMOJIS.ROCKET}  Successfully created project ${chalk.green(name)}`\n      : `${EMOJIS.ROCKET}  Successfully created a new project`,\n  DEPENDENCIES_INSTALLATION_SUCCEED: (name: string) =>\n    `${EMOJIS.ROCKET}  Dependencies installed successfully with ${chalk.green(name)}`,\n  PACKAGE_MANAGER_INSTALLATION_FAILED: (commandToRunManually: string) =>\n    `${EMOJIS.SCREAM}  Packages installation failed!\\nIn case you don't see any errors above, consider manually running the failed command ${commandToRunManually} to see more details on why it errored out.`,\n  PACKAGE_MANAGER_INSTALLATION_IN_PROGRESS: `Package installation in progress... ${EMOJIS.COFFEE}`,\n  DIRECTORY_ALREADY_EXISTS: (directory: string) =>\n    `${EMOJIS.SCREAM}  The directory ${chalk.red(directory)} already exists. Aborting...`,\n  CONFIG_INIT_SUCCEED: (project: string) =>\n    `${EMOJIS.ROCKET}  Successfully initialized the configuration for projects of ${chalk.green(project)}`,\n  CONFIG_INIT_FAILED: `${EMOJIS.SCREAM}  Configuration initialization failed!`,\n};","import { get } from 'node-emoji';\n\nexport const EMOJIS = {\n  HEART: get('heart'),\n  COFFEE: get('coffee'),\n  BEER: get('beer'),\n  BROKEN_HEART: get('broken_heart'),\n  CRYING: get('crying_cat_face'),\n  HEART_EYES: get('heart_eyes_cat'),\n  JOY: get('joy_cat'),\n  KISSING: get('kissing_cat'),\n  SCREAM: get('scream_cat'),\n  ROCKET: get('rocket'),\n  SMIRK: get('smirk_cat'),\n  RAISED_HANDS: get('raised_hands'),\n  POINT_RIGHT: get('point_right'),\n  ZAP: get('zap'),\n  BOOM: get('boom'),\n  PRAY: get('pray'),\n  WINE: get('wine_glass'),\n};\n","export const templateChoices = {\n  'nodejs-express-basic': {\n    value: 'nodejs-express-basic',\n    description: 'Node.js with TypeScript'\n  }\n}\n\nexport const configChoices = {\n  'nestjs': {\n    value: 'nestjs',\n    description: 'Config for NestJS'\n  }\n  // 'express': {\n  //   value: 'express',\n  //   description: 'Config for Node.js/Express'\n  // }\n}","import { readFile } from 'fs/promises';\nexport * from './install';\n\nexport const extractPackageManager = (filePath: string) => {\n  const match = filePath.match(/\\/(pnpm|npm|yarn)/);\n  return match ? match[1] : null;\n}\n\nexport async function readPackageJson(filePath: string) {\n  const data = await readFile(filePath, 'utf-8');\n  return JSON.parse(data);\n}","import chalk from 'chalk';\nimport { glob } from 'glob';\nimport { spawn } from 'child_process';\nimport os from \"os\";\nimport path from 'path'\nimport { extractPackageManager, readPackageJson } from '.';\nimport { MESSAGES } from '../utils/messages';\nimport { writeFile } from 'fs/promises';\n\nexport const installDependenciesInNewProject = async (destinationPath: string, packageManager: string, projectName: string) => {\n  const installProcess = spawn(packageManager, ['install'], {\n    stdio: 'inherit',\n    cwd: destinationPath\n  });\n\n  installProcess.on('exit', (code) => {\n    if (code === 0) {\n      console.info(chalk.green(MESSAGES.PACKAGE_MANAGER_INSTALLATION_SUCCEED(packageManager)));\n      console.log('Inside that directory, you can run several commands:')\n      console.log()\n      console.log(chalk.cyan(`  ${packageManager} ${packageManager !== 'npm' ? '' : 'run '}dev`))\n      console.log('    Starts the development server.')\n      console.log()\n      console.log(chalk.cyan(`  ${packageManager} ${packageManager !== 'npm' ? '' : 'run '}build`))\n      console.log('    Builds the app for production.')\n      console.log()\n      console.log(chalk.cyan(`  ${packageManager} start`))\n      console.log('    Runs the built app in production mode.')\n      console.log()\n      console.log('We suggest that you begin by typing:')\n      console.log()\n      console.log(chalk.cyan('  cd'), projectName)\n      console.log(`  ${chalk.cyan(`${packageManager} ${packageManager !== 'npm' ? '' : 'run '}dev`)}`)\n    } else {\n      chalk.red(\n        MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\n          chalk.bold(packageManager),\n        ),\n      )\n    }\n  });\n\n  // Handle errors during the installation process\n  installProcess.on('error', (error) => {\n    chalk.red(\n      MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\n        chalk.bold(packageManager),\n      ),\n    )\n  })\n}\n\nexport const installConfigDependencies = async (sourcePath: string, destinationPath: string) => {\n  const packageJSONOrigin = await readPackageJson(sourcePath);\n  const packageJSONDestination = await readPackageJson(path.join(destinationPath, \"package.json\"));\n\n  const [packageLock] = await glob(path.join(destinationPath, '{yarn.lock,package-lock.json,pnpm-lock.yaml}'))\n\n  const mergedPackageJSON = {\n    ...packageJSONDestination,\n    // Merge scripts\n    scripts: {\n      ...packageJSONDestination.scripts,\n      ...packageJSONOrigin.scripts,\n    },\n    // Merge dependencies\n    dependencies: {\n      ...packageJSONDestination.dependencies,\n      ...packageJSONOrigin.dependencies\n    },\n    // Merge devDependencies\n    devDependencies: {\n      ...packageJSONDestination.devDependencies,\n      ...packageJSONOrigin.devDependencies\n    },\n    jest: {\n      ...packageJSONDestination.jest,\n      ...packageJSONOrigin.jest\n    },\n    config: {\n      ...packageJSONDestination.config,\n      ...packageJSONOrigin.config\n    }\n  };\n\n  await writeFile(\n    path.join(destinationPath, \"package.json\"),\n    JSON.stringify(mergedPackageJSON, null, 2) + os.EOL\n  );\n\n  const packageManager = extractPackageManager(packageLock) ?? 'npm'\n  const args = [\n    'install',\n    'husky',\n    'conventional-changelog',\n    'cz-conventional-changelog',\n    '@commitlint/cli',\n    '@commitlint/config-conventional',\n    '@commitlint/prompt-cli'\n  ];\n\n  const installProcess = spawn(packageManager, args, {\n    stdio: 'inherit',\n    cwd: destinationPath\n  });\n\n  installProcess.on('exit', async (code) => {\n    if (code === 0) {\n      console.info(chalk.green(MESSAGES.DEPENDENCIES_INSTALLATION_SUCCEED(packageManager)));\n      const huskyInitProcess = spawn('npx', ['husky', 'init'], {\n        stdio: 'inherit',\n        cwd: destinationPath\n      });\n\n      huskyInitProcess.on('exit', (huskyCode) => {\n        if (huskyCode === 0) {\n          console.info(chalk.green('Husky initialization successful.'));\n        } else {\n          console.error(chalk.red('Husky initialization failed.'));\n        }\n      });\n    } else {\n      chalk.red(\n        MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\n          chalk.bold(packageManager),\n        ),\n      )\n    }\n  });\n\n  // Handle errors during the installation process\n  installProcess.on('error', (error) => {\n    chalk.red(\n      MESSAGES.PACKAGE_MANAGER_INSTALLATION_FAILED(\n        chalk.bold(packageManager),\n      ),\n    )\n  })\n}","import inquirer from 'inquirer'\nimport path from 'path'\nimport { fileURLToPath } from \"url\";\nimport { configChoices } from '../utils/template-choices'\nimport { installConfigDependencies } from '../helpers';\nimport { copyFiles } from '../helpers/copy';\n\nexport const config = () => {\n  inquirer.prompt([\n    {\n      type: 'list',\n      name: 'projectConfig',\n      message: 'Select your project:',\n      choices: Object.keys(configChoices)\n    },\n    {\n      type: 'list',\n      name: 'type',\n      message: 'Select your project:',\n      choices: ['monolithic']\n    },\n  ])\n    .then(async answers => {\n      // Get the selected project\n      const project = answers.projectConfig\n      const typeProject = answers.type\n      // Get the project directory\n\n      // root directory\n      const destination = process.cwd()\n\n      // Get the template folder\n      const projectConfig = path.join(\n        path.dirname(fileURLToPath(import.meta.url)),\n        \"configs\",\n        `${project}/${typeProject}`\n      )\n      \n      copyFiles(projectConfig, destination, project)\n\n      await installConfigDependencies(path.join(projectConfig, \"package.json\"), destination)\n    })\n}\n","import chalk from 'chalk';\nimport ncp from 'ncp';\nimport { MESSAGES } from '../utils/messages';\nimport path from 'path';\n\nexport const copyFiles = (projectConfigPath: string, destinationPath: string, projectName: string) => {\n  ncp(projectConfigPath, destinationPath, {\n    filter: (source) => {\n      // Exclude the package.json file\n      const nombreArchivo = path.basename(source);\n      return nombreArchivo !== 'package.json'\n    }\n  }, function (error) {\n    if (error) {\n      console.error(chalk.red(MESSAGES.CONFIG_INIT_FAILED));\n    } else {\n      console.log(chalk.green(MESSAGES.CONFIG_INIT_SUCCEED(projectName)))\n    }\n  })\n};","{\n  \"name\": \"create-appyc\",\n  \"version\": \"1.0.16\",\n  \"description\": \"Create a new projects from a template\",\n  \"main\": \"index.mjs\",\n  \"preferGlobal\": true,\n  \"bin\": {\n    \"create-appyc\": \"dist/index.mjs\"\n  },\n  \"files\": [\n    \"dist/**/*\"\n  ],\n  \"author\": \"Ulises Vargas\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"chalk\": \"5.3.0\",\n    \"commander\": \"12.0.0\",\n    \"glob\": \"^10.3.10\",\n    \"inquirer\": \"8.2.6\",\n    \"ncp\": \"2.0.0\",\n    \"node-emoji\": \"2.1.3\",\n    \"ts-node\": \"10.9.2\"\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"start\": \"node dist/index.mjs\",\n    \"dev\": \"tsup --watch\"\n  },\n  \"devDependencies\": {\n    \"@types/inquirer\": \"9.0.7\",\n    \"@types/ncp\": \"2.0.8\",\n    \"@types/node\": \"^20.11.20\",\n    \"tsup\": \"^8.0.2\",\n    \"typescript\": \"^5.3.3\"\n  }\n}\n"],"mappings":"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","names":["path","chalk","chalk","chalk","path","chalk","inquirer","path","fileURLToPath","chalk","path","chalk","inquirer","path","fileURLToPath"]}