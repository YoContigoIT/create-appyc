{"version":3,"sources":["../index.ts","../actions/create.ts","../utils/messages.ts","../utils/emojis.ts","../utils/template-choices.ts","../helpers/index.ts","../helpers/install.ts","../helpers/checkGitDirectory.ts","../helpers/showConsoleInfo.ts","../helpers/isNestProject.ts","../actions/config.ts","../helpers/copy.ts","../helpers/searchLockFile.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { program } from 'commander'\r\nimport { config, create } from './actions'\r\nimport { version } from './package.json'\r\n\r\nprogram\r\n  .name(\"create-appyc\")\r\n  .version(version, '-v, --version', 'Output the current version')\r\n  .description('Create a new project with Appyc')\r\n\r\nprogram\r\n  .command('create')\r\n  .description('Create a new project')\r\n  .action(create)\r\n\r\nprogram\r\n  .command('config')\r\n  .description('Initialize the configuration')\r\n  .action(config)\r\n\r\nif (process.argv.length <= 2)\r\n  console.log(program.help());\r\nelse\r\n  program.parse();","import inquirer from 'inquirer'\r\nimport fs from 'fs/promises';\r\nimport path from 'path'\r\nimport { fileURLToPath } from \"url\";\r\nimport { MESSAGES } from '../utils/messages';\r\nimport { connectorsDatabaseChoices, databaseChoises, templateChoices } from '../utils/template-choices';\r\nimport chalk from 'chalk';\r\nimport { installAndConfigDependencies } from '../helpers';\r\nimport { showConsoleInfo } from '../helpers/showConsoleInfo';\r\nimport { isNestProject } from '../helpers/isNestProject';\r\n\r\nexport const create = async () => {\r\n  const initialOptions = await inquirer.prompt([\r\n    {\r\n      type: 'list',\r\n      name: 'template',\r\n      message: 'Select a template:',\r\n      choices: Object.keys(templateChoices)\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'database',\r\n      message: 'Select the database to use:',\r\n      choices: Object.keys(databaseChoises)\r\n    }\r\n  ])\r\n\r\n  let useDatabase = { connector: '' }\r\n\r\n  if (initialOptions.database !== 'mongodb') {\r\n    useDatabase = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'connector',\r\n        message: 'Select the connector to use:',\r\n        choices: Object.keys(connectorsDatabaseChoices)\r\n      }\r\n    ])\r\n  }\r\n\r\n  const configProyect = await inquirer.prompt([\r\n    {\r\n      type: 'input',\r\n      name: 'name',\r\n      message: 'Project name:',\r\n      default: 'my-app',\r\n      validate: (input: string) => {\r\n        if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\r\n        else return 'Project name may only include letters, numbers, underscores and hashes.';\r\n      }\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'packageManager',\r\n      message: 'Select a package manager:',\r\n      choices: ['npm', 'yarn', 'pnpm']\r\n    }\r\n  ])\r\n\r\n  // Get the selected project\r\n  const project = templateChoices[initialOptions.template]\r\n  // Get the project directory\r\n  const projectDirectory = configProyect.name\r\n  // Get the destination path\r\n  const destination = path.join(process.cwd(), projectDirectory);\r\n  // Get the template folder\r\n  const template = path.join(\r\n    path.dirname(fileURLToPath(import.meta.url)),\r\n    \"templates\",\r\n    project.value,\r\n  )\r\n\r\n  // Check if the directory already exists\r\n  fs.mkdir(destination).catch((err) => {  \r\n    console.error(chalk.red(MESSAGES.DIRECTORY_ALREADY_EXISTS(projectDirectory)));\r\n    process.exit(1);\r\n  })\r\n\r\n  // Copy the template to the destination\r\n  if (initialOptions.database !== 'mongodb') {\r\n    await fs.cp(path.join(template, `${initialOptions.database}/${useDatabase.connector}`), destination, { recursive: true });\r\n  } else {\r\n    await fs.cp(path.join(template, 'mongoose'), destination, { recursive: true });\r\n  }\r\n\r\n  await installAndConfigDependencies(destination, configProyect.packageManager).then(async () => {\r\n    showConsoleInfo(configProyect.packageManager, configProyect.name, await isNestProject(project.value))\r\n  })\r\n}\r\n","import chalk from 'chalk';\r\nimport { EMOJIS } from './emojis';\r\n\r\nexport const MESSAGES = {\r\n  PACKAGE_MANAGER_INSTALLATION_SUCCEED: (name: string) =>\r\n    name !== '.'\r\n      ? `${EMOJIS.ROCKET}  Successfully created project ${chalk.green(name)}`\r\n      : `${EMOJIS.ROCKET}  Successfully created a new project`,\r\n  DEPENDENCIES_INSTALLATION_SUCCEED: (name: string) =>\r\n    `${EMOJIS.ROCKET}  Dependencies installed successfully with ${chalk.green(name)}`,\r\n  DEPENDENCIES_INSTALLATION_FAILED: `${EMOJIS.SCREAM}  Dependencies installation failed!`,\r\n  PACKAGE_MANAGER_INSTALLATION_FAILED: (commandToRunManually: string) =>\r\n    `${EMOJIS.SCREAM}  Packages installation failed!\\nIn case you don't see any errors above, consider manually running the failed command ${commandToRunManually} to see more details on why it errored out.`,\r\n  PACKAGE_MANAGER_INSTALLATION_IN_PROGRESS: `Package installation in progress... ${EMOJIS.COFFEE}`,\r\n  DIRECTORY_ALREADY_EXISTS: (directory: string) =>\r\n    `${EMOJIS.SCREAM}  The directory ${chalk.red(directory)} already exists. Aborting...`,\r\n  CONFIG_INIT_SUCCEED: (project: string) =>\r\n    `${EMOJIS.ROCKET}  Successfully initialized the configuration for projects of ${chalk.green(project)}`,\r\n  CONFIG_INIT_FAILED: `${EMOJIS.SCREAM}  Configuration initialization failed!`,\r\n};","import { get } from 'node-emoji';\r\n\r\nexport const EMOJIS = {\r\n  HEART: get('heart'),\r\n  COFFEE: get('coffee'),\r\n  BEER: get('beer'),\r\n  BROKEN_HEART: get('broken_heart'),\r\n  CRYING: get('crying_cat_face'),\r\n  HEART_EYES: get('heart_eyes_cat'),\r\n  JOY: get('joy_cat'),\r\n  KISSING: get('kissing_cat'),\r\n  SCREAM: get('scream_cat'),\r\n  ROCKET: get('rocket'),\r\n  SMIRK: get('smirk_cat'),\r\n  RAISED_HANDS: get('raised_hands'),\r\n  POINT_RIGHT: get('point_right'),\r\n  ZAP: get('zap'),\r\n  BOOM: get('boom'),\r\n  PRAY: get('pray'),\r\n  WINE: get('wine_glass'),\r\n};\r\n","export const templateChoices = {\r\n  'nestjs-jwt-strategy': {\r\n    value: 'nestjs-jwt-strategy',\r\n    description: 'NestJS with JWT Strategy'\r\n  }\r\n  // 'nodejs-express-basic': {\r\n  //   value: 'nodejs-express-basic',\r\n  //   description: 'Node.js with TypeScript'\r\n  // }\r\n}\r\n\r\nexport const connectorsDatabaseChoices = {\r\n  'sequelize': {\r\n    value: 'sequelize',\r\n    description: 'Sequelize'\r\n  },\r\n  'typeorm': {\r\n    value: 'typeorm',\r\n    description: 'TypeORM'\r\n  }\r\n}\r\n\r\nexport const databaseChoises = {\r\n  'mongodb': {\r\n    value: 'mongodb',\r\n    description: 'MongoDB Database'\r\n  },\r\n  'mysql': {\r\n    value: 'mysql',\r\n    description: 'MySQL Database'\r\n  },\r\n  'postgres': {\r\n    value: 'postgres',\r\n    description: 'Postgres Database'\r\n  }\r\n}\r\n\r\nexport const configChoices = {\r\n  'nestjs': {\r\n    value: 'nestjs',\r\n    description: 'Config for NestJS'\r\n  },\r\n  'express': {\r\n    value: 'express',\r\n    description: 'Config for Express with TypeScript'\r\n  }\r\n}","import { readFile } from 'fs/promises';\r\nexport * from './install';\r\n\r\nexport async function readPackageJson(filePath: string) {\r\n  const data = await readFile(filePath, 'utf-8');\r\n  return JSON.parse(data);\r\n}","import chalk from \"chalk\";\r\nimport { spawn } from \"child_process\";\r\nimport { MESSAGES } from \"../utils/messages\";\r\nimport { checkGitDirectory } from \"./checkGitDirectory\";\r\n\r\nconst runCommand = async (command: string, args: string[], cwd: string) => {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const child = spawn(command, args, {\r\n      stdio: \"inherit\",\r\n      cwd,\r\n      shell: process.platform === \"win32\",\r\n    });\r\n\r\n    child.on(\"exit\", (code) => {\r\n      if (code === 0) {\r\n        resolve();\r\n      } else {\r\n        reject(new Error(\"Command failed to execute.\"));\r\n      }\r\n    });\r\n\r\n    child.on(\"error\", reject);\r\n  });\r\n};\r\n\r\nconst installDependencies = async (\r\n  destinationPath: string,\r\n  packageManager: string,\r\n  dependencies: string[],\r\n  isDev = false\r\n) => {\r\n  let args = [packageManager === \"yarn\" ? \"add\" : \"install\", ...dependencies];\r\n  if (isDev) {\r\n    args.push(packageManager === \"yarn\" ? \"--dev\" : \"-D\");\r\n  }\r\n\r\n  // Corregir argumentos para Windows\r\n  if (process.platform === \"win32\") {\r\n    args = [\"/c\", packageManager].concat(args);\r\n  }\r\n\r\n  await runCommand(\r\n    process.platform === \"win32\" ? \"cmd\" : packageManager,\r\n    args,\r\n    destinationPath\r\n  );\r\n  console.info(\r\n    chalk.green(MESSAGES.DEPENDENCIES_INSTALLATION_SUCCEED(packageManager))\r\n  );\r\n};\r\n\r\nconst initializeHusky = async (destinationPath) => {\r\n  await runCommand(\"npx\", [\"husky\", \"init\"], destinationPath);\r\n  console.info(chalk.green(\"Husky initialization successful.\"));\r\n};\r\n\r\nexport const installAndConfigDependencies = async (\r\n  destinationPath: string,\r\n  packageManager: string\r\n) => {\r\n  const devDependencies = [\r\n    \"husky\",\r\n    \"conventional-changelog\",\r\n    \"cz-conventional-changelog\",\r\n    \"@commitlint/cli\",\r\n    \"@commitlint/config-conventional\",\r\n    \"@commitlint/prompt-cli\",\r\n  ];\r\n\r\n  const productionDependencies = [\"@swc/cli\", \"@swc/core\", \"@swc/jest\"];\r\n\r\n  try {\r\n    console.info(chalk.blue(\"Installing development dependencies...\"));\r\n    await installDependencies(\r\n      destinationPath,\r\n      packageManager,\r\n      devDependencies,\r\n      true\r\n    );\r\n\r\n    if (productionDependencies.length > 0) {\r\n      console.info(chalk.blue(\"Installing production dependencies...\"));\r\n      await installDependencies(\r\n        destinationPath,\r\n        packageManager,\r\n        productionDependencies\r\n      );\r\n    }\r\n\r\n    const exists = await checkGitDirectory(destinationPath);\r\n    if (!exists) {\r\n      runCommand(\"git\", [\"init\"], destinationPath);\r\n    }\r\n\r\n    console.info(chalk.blue(\"Initializing Husky...\"));\r\n    await initializeHusky(destinationPath);\r\n\r\n    console.info(chalk.green(\"Setup complete.\"));\r\n  } catch (error) {\r\n    console.error(chalk.red(`Setup failed: ${error.message}`));\r\n  }\r\n};\r\n","import { access } from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nexport const checkGitDirectory = async (directory) => {\r\n    try {\r\n      const gitPath = path.join(directory, '.git');\r\n      await access(gitPath);\r\n      return true;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }","import chalk from \"chalk\";\r\n\r\nexport const showConsoleInfo = async (packageManager: string, projectName: string, nestProject: boolean = false) => {\r\n  console.log(\"Inside that directory, you can run several commands:\");\r\n  console.log();\r\n  console.log(\r\n    chalk.cyan(\r\n      `  ${packageManager} ${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:dev\" : \"dev\"}`\r\n    )\r\n  );\r\n  console.log(\"    Starts the development server.\");\r\n  console.log();\r\n  console.log(\r\n    chalk.cyan(\r\n      `  ${packageManager} ${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:build\" : \"build\"}`\r\n    )\r\n  );\r\n  console.log(\"    Builds the app for production.\");\r\n  console.log();\r\n  console.log(chalk.cyan(`  ${packageManager} start`));\r\n  console.log(\"    Runs the built app in production mode.\");\r\n  console.log();\r\n  console.log(\"We suggest that you begin by typing:\");\r\n  console.log();\r\n  console.log(chalk.cyan(\"  cd\"), projectName);\r\n  console.log(\r\n    `  ${chalk.cyan(\r\n      `${packageManager} ${packageManager !== \"npm\" ? \"\" : \"run\"} ${nestProject ? \"start:dev\" : \"dev\"}`\r\n    )}`\r\n  );\r\n};\r\n","export const isNestProject = async (project: string): Promise<boolean> => {\r\n  const regex = /^nestjs/i;\r\n  return regex.test(project);\r\n};\r\n","import inquirer from \"inquirer\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { configChoices } from \"../utils/template-choices\";\r\nimport { installAndConfigDependencies, readPackageJson } from \"../helpers\";\r\nimport { copyFiles } from \"../helpers/copy\";\r\nimport { searchLockFile } from \"../helpers/searchLockFile\";\r\nimport { writeFile } from \"fs/promises\";\r\nimport os from \"os\";\r\n\r\nexport const config = () => {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"list\",\r\n        name: \"projectConfig\",\r\n        message: \"Select your project:\",\r\n        choices: Object.keys(configChoices),\r\n      },\r\n      {\r\n        type: \"list\",\r\n        name: \"type\",\r\n        message: \"Select your project:\",\r\n        choices: [\"monolithic\"],\r\n      },\r\n    ])\r\n    .then(async (answers) => {\r\n      // Get the selected project\r\n      const project = answers.projectConfig;\r\n\r\n      // Get the selected type\r\n      const typeProject = answers.type;\r\n\r\n      // root directory\r\n      const destination = process.cwd();\r\n\r\n      // Get the template folder\r\n      const projectConfig = path.join(\r\n        path.dirname(fileURLToPath(import.meta.url)),\r\n        \"configs\",\r\n        `${project}/${typeProject}`\r\n      );\r\n\r\n      // Get Source package.json\r\n      const source = path.join(projectConfig, \"package.json\");\r\n\r\n      copyFiles(projectConfig, destination, project);\r\n\r\n      const packageJSONOrigin = await readPackageJson(source);\r\n      const packageJSONDestination = await readPackageJson(\r\n        path.join(destination, \"package.json\")\r\n      );\r\n\r\n      delete packageJSONDestination.jest;\r\n      delete packageJSONDestination.scripts[\"start:debug\"]\r\n      delete packageJSONDestination.scripts[\"start:prod\"]\r\n\r\n      const packageManager = await searchLockFile(destination);\r\n\r\n      const mergedPackageJSON = {\r\n        ...packageJSONDestination,\r\n        scripts: {\r\n          ...packageJSONDestination.scripts,\r\n          ...packageJSONOrigin.scripts,\r\n        },\r\n        dependencies: {\r\n          ...packageJSONDestination.dependencies,\r\n          ...packageJSONOrigin.dependencies,\r\n        },\r\n        devDependencies: {\r\n          ...packageJSONDestination.devDependencies,\r\n          ...packageJSONOrigin.devDependencies,\r\n        },\r\n        config: {\r\n          ...packageJSONDestination.config,\r\n          ...packageJSONOrigin.config,\r\n        },\r\n      };\r\n\r\n      await writeFile(\r\n        path.join(destination, \"package.json\"),\r\n        JSON.stringify(mergedPackageJSON, null, 2) + os.EOL\r\n      );\r\n\r\n      await installAndConfigDependencies(destination, packageManager);\r\n    });\r\n};\r\n","import chalk from 'chalk';\r\nimport ncp from 'ncp';\r\nimport { MESSAGES } from '../utils/messages';\r\nimport path from 'path';\r\n\r\nexport const copyFiles = (projectConfigPath: string, destinationPath: string, projectName: string) => {\r\n  ncp(projectConfigPath, destinationPath, {\r\n    filter: (source) => {\r\n      // Exclude the package.json file\r\n      const nombreArchivo = path.basename(source);\r\n      return nombreArchivo !== 'package.json'\r\n    }\r\n  }, function (error) {\r\n    if (error) {\r\n      console.error(chalk.red(MESSAGES.CONFIG_INIT_FAILED));\r\n    } else {\r\n      console.log(chalk.green(MESSAGES.CONFIG_INIT_SUCCEED(projectName)))\r\n    }\r\n  })\r\n};","import { readdir } from \"fs/promises\";\r\n\r\nconst packageManagers = {\r\n  \"package-lock.json\": \"npm\",\r\n  \"yarn.lock\": \"yarn\",\r\n  \"pnpm-lock.yaml\": \"pnpm\",\r\n};\r\n\r\nexport async function searchLockFile(destinationPath): Promise<string> {\r\n  // Read the directory\r\n  const files = await readdir(destinationPath);\r\n\r\n  // Regular expression to match the lock files\r\n  const regex = /^(yarn\\.lock|package-lock\\.json|pnpm-lock\\.yaml)$/;\r\n\r\n  // Filter the files\r\n  const matchedFiles = files.find((file) => regex.test(file));\r\n\r\n  return packageManagers[matchedFiles ?? \"npm\"]; // Return the matched files\r\n}\r\n","{\r\n  \"name\": \"create-appyc\",\r\n  \"version\": \"1.1.0\",\r\n  \"description\": \"Create a new projects from a template\",\r\n  \"main\": \"index.mjs\",\r\n  \"preferGlobal\": true,\r\n  \"bin\": {\r\n    \"create-appyc\": \"dist/index.mjs\"\r\n  },\r\n  \"files\": [\r\n    \"dist/**/*\"\r\n  ],\r\n  \"author\": \"Ulises Vargas\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"chalk\": \"5.3.0\",\r\n    \"commander\": \"12.0.0\",\r\n    \"glob\": \"^10.3.10\",\r\n    \"inquirer\": \"8.2.6\",\r\n    \"ncp\": \"2.0.0\",\r\n    \"node-emoji\": \"2.1.3\",\r\n    \"ts-node\": \"10.9.2\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup\",\r\n    \"start\": \"node dist/index.mjs\",\r\n    \"dev\": \"tsup --watch\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/inquirer\": \"9.0.7\",\r\n    \"@types/ncp\": \"2.0.8\",\r\n    \"@types/node\": \"^20.11.20\",\r\n    \"tsup\": \"^8.0.2\",\r\n    \"typescript\": \"^5.3.3\"\r\n  }\r\n}\r\n"],"mappings":"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","names":["path","chalk","chalk","chalk","chalk","path","chalk","inquirer","path","fileURLToPath","chalk","path","chalk","inquirer","path","fileURLToPath"]}